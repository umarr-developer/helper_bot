import asyncio

from aiogram import types, F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.orm import sessionmaker

from src.keyboards import FAQListKeyboard
from src.models import Question

router = Router()


class AddQuestionState(StatesGroup):
    question = State()
    answer = State()
    accept = State()


class EditQuestionState(StatesGroup):
    question = State()
    answer = State()


@router.callback_query(F.data == 'admin-manage-faq', StateFilter(None))
async def on_faq(callback: types.CallbackQuery):
    await callback.answer('‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ ‚ùì –í–æ–ø—Ä–æ—Å—ã FAQ')

    text = '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ <b>‚ùì FAQ</b> - —Ä–∞–∑–¥–µ–ª —Å —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏\n\n' \
           '<i>‚ÜòÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</i>'
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å',
                                           callback_data='add-question')
            ],
            [
                types.InlineKeyboardButton(text='üìí –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É',
                                           callback_data='faq-list')
            ]
        ]
    )
    await callback.message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == 'add-question', StateFilter(None))
async def on_add_faq(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)

    await state.set_state(AddQuestionState.question)
    text = '–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å\n\n' \
           '‚ùï <i>–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è</i>'
    await callback.message.answer(text)


@router.message(AddQuestionState.question)
async def on_add_faq_question(message: types.Message, state: FSMContext):
    await state.set_state(AddQuestionState.answer)
    await state.update_data({'question': message.text})

    text = '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å\n\n' \
           '<i>‚ùï –û—Ç–≤–µ—Ç —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è</i>'
    await message.answer(text)


@router.message(AddQuestionState.answer)
async def on_add_faq_answer(message: types.Message, state: FSMContext):
    await state.set_state(AddQuestionState.accept)
    await state.update_data({'answer': message.text})

    data = await state.get_data()
    text = 'üìã –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞\n\n' \
           f'<b>–í–æ–ø—Ä–æ—Å</b>: {data.get("question")}\n' \
           f'<b>–û—Ç–≤–µ—Ç</b>: {data.get("answer")}\n\n' \
           '<i>‚ÜòÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</i>'
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text='‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save-question'),
                types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel')
            ]
        ]
    )

    await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == 'save-question', AddQuestionState.accept)
async def on_add_question_accept(callback: types.CallbackQuery, state: FSMContext, db: sessionmaker):
    await callback.answer('')
    await callback.message.edit_reply_markup()

    data = await state.get_data()
    question = data.get('question')
    answer = data.get('answer')

    await Question.new(db, question, answer)

    text = '‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text='‚ÜñÔ∏è –ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫',
                    callback_data='faq-list'
                )
            ]
        ]
    )
    await callback.message.answer(text, reply_markup=keyboard)

    await state.clear()

    await asyncio.sleep(0.5)


@router.callback_query(F.data == 'faq-list', StateFilter(None))
@router.callback_query(F.data.startswith('faq-action'), StateFilter(None))
async def on_faq_list(callback: types.CallbackQuery, db: sessionmaker):
    await callback.answer()
    await callback.message.edit_reply_markup()

    text = 'üìÑ –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤'

    buttons = await FAQListKeyboard.get_buttons(db, 'faq-question')
    keyboard = FAQListKeyboard(buttons, 'faq-action')

    if callback.data.startswith('faq-action'):
        prefix, index = callback.data.split('_')
        await callback.message.edit_text(text, reply_markup=keyboard.as_keyboard(int(index)))
        return

    await callback.message.answer(text, reply_markup=keyboard.as_keyboard(0))


@router.callback_query(F.data.startswith('faq-question'), StateFilter(None))
async def on_faq_question(callback: types.CallbackQuery, db: sessionmaker):
    await callback.answer()

    prefix, index = callback.data.split('_')
    question_id = int(index)
    question = await Question.get(db, question_id)

    text = f'<b>ID</b>: <code>{question[0].id}</code>\n\n' \
           f'<b>–í–æ–ø—Ä–æ—Å</b>: {question[0].question}\n' \
           f'<b>–û—Ç–≤–µ—Ç</b>: {question[0].answer}\n\n' \
           '<i>‚ÜòÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</i>'
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                                           callback_data=f'edit-faq_{index}'),
                types.InlineKeyboardButton(text='üö´ –£–¥–∞–ª–∏—Ç—å',
                                           callback_data=f'delete-faq-question_{index}')
            ],
            [
                types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='faq-action_0')
            ]
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith('delete-faq'), StateFilter(None))
async def on_delete_faq(callback: types.CallbackQuery, db):
    await callback.message.edit_reply_markup()
    await callback.answer()

    prefix, index = callback.data.split('_')

    text = f'‚ùé –í–æ–ø—Ä–æ—Å —Å <b>ID</b> {index} —É–¥–∞–ª–µ–Ω'
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text='‚ÜñÔ∏è –ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫', callback_data='faq-list')
            ]
        ]
    )

    await Question.delete(db, int(index))
    await callback.message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith('edit-faq'), StateFilter(None))
async def on_edit_faq_question(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_reply_markup()

    prefix, index = callback.data.split('_')

    text = 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å <b>–≤–æ–ø—Ä–æ—Å</b>\n\n' \
           '‚ÜòÔ∏è <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</i>'
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å',
                                           callback_data=f'edit-question-faq_{index}'),
                types.InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç',
                                           callback_data=f'edit-answer-faq_{index}')
            ],
            [
                types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='faq_list')
            ]
        ]
    )

    await callback.message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith('edit-question-faq'), StateFilter(None))
async def on_edit_faq_question(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_reply_markup()

    await state.set_state(EditQuestionState.question)

    prefix, index = callback.data.split('_')
    await state.update_data({'id': index})

    text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å\n\n' \
           '‚ùï <i>–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è</i>'
    await callback.message.answer(text)


@router.message(EditQuestionState.question)
async def on_edit_faq_new_question(message: types.Message, state: FSMContext, db):
    data = await state.get_data()
    _id = data.get('id')

    question = message.text

    await Question.edit_question(db, int(_id), question)

    text = '‚òëÔ∏è –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text='‚ÜñÔ∏è –ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫', callback_data='faq-list')
            ]
        ]
    )
    await message.answer(text, reply_markup=keyboard)

    await state.clear()


@router.callback_query(F.data.startswith('edit-answer-faq'), StateFilter(None))
async def on_edit_faq_answer(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_reply_markup()

    await state.set_state(EditQuestionState.answer)

    prefix, index = callback.data.split('_')
    await state.update_data({'id': index})

    text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç\n\n' \
           '‚ùï <i>–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è</i>'
    await callback.message.answer(text)


@router.message(EditQuestionState.answer)
async def on_edit_faq_new_answer(message: types.Message, state: FSMContext, db):
    data = await state.get_data()
    _id = data.get('id')

    answer = message.text

    await Question.edit_answer(db, int(_id), answer)

    text = '‚òëÔ∏è –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text='‚ÜñÔ∏è –ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫', callback_data='faq-list')
            ]
        ]
    )
    await message.answer(text, reply_markup=keyboard)

    await state.clear()
